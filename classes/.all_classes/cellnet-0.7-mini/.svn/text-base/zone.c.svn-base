#define _BSD_SOURCE
#include <math.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <dirent.h>
#include <errno.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdint.h>

#include "celldef.h"
#include "zone.h"
#include "conf.h"
#include "signaler.h"
#include "debug.h"

extern cell_t *cells;
extern uint32_t pixels;
int ZONE_MIN_MULTI = 16;

uint8_t nzones = 1;
zonedef_t full_zone = {
    .name = "full",
    .frame = 0,
    .active = 0,
    .delta = 0.0,
    .trigger = DEF_ZONE_TRIGGER
};

zonedef_t *all_zones[MAX_ZONES] = { &full_zone };


/************************************/


zonedef_t *read_zone (char *name) {
    
    _debug_flow("Entered read_zone for '%s'", name);

    struct stat zstat;
    zonedef_t *this_zone = NULL;
    char *path;
    int free_path = 0;

    if (name[0] == '/')
        path = name;
    else {
        path = (char*)malloc(strlen(_ZONES_PATH_) + strlen(name) + 1);
        strcpy(path, _ZONES_PATH_);
        strcat(path, name);
        free_path = 1;
    }

    _debug_verbose("--> stating file", 0);

    if (stat((const char*)path, &zstat) == -1) {
        _show_warning("Load", "Unable to load zone '%s': '%s'", name, strerror(errno));
        if (free_path) free(path);
        return NULL;
    }

    _debug_verbose("--> getting size", 0);

    if (zstat.st_size < (sizeof(long) * 3) ) { //sizeof(zonedef_t)) {
        _show_warning("Load", "Unable to load zone '%s', zone file too small to contain valid zone data", name);
        if (free_path) free(path);
        return NULL;
    }

    _debug_verbose("--> opening file", 0);

    int fd = open(path, O_RDONLY);
    if (free_path) free(path);
    if (fd == -1) {
        _show_warning("Load", "Unable to load zone '%s', failed to open file: '%s'", name, strerror(errno));
        return NULL;
    }

    this_zone = calloc(1, sizeof(zonedef_t) + zstat.st_size);

    this_zone->count.strides = (zstat.st_size / sizeof(unsigned long)) - 2;

    int i = 0, c = this_zone->count.strides;
    double trigger = 0.0;
//    void *buff = malloc(sizeof(double));
    unsigned long tmpval = 0; //(unsigned long*)buff;

    // Reading zone trigger delta 
    read(fd, &trigger, sizeof(double));
    this_zone->trigger = trigger;

    // Reading zone frame rate
    read(fd, &tmpval, sizeof(unsigned long));
    this_zone->rate = tmpval;

    _debug_verbose("reading strides", 0);

    while (c--) {
        int t = read(fd, &tmpval, sizeof(unsigned long));
        if (t == -1) {
            _show_warning("Load", "Unable to load zone '%s', read error: '%s'", name, strerror(errno));
            close(fd);
            return NULL;
        }
        this_zone->strides[i++] = tmpval;
    }
    close(fd);
//    free(buff);

    // determine pixel count...
    this_zone->count.pixels = 0;
    for (i = 1; i < this_zone->count.strides; i += 2 )
        this_zone->count.pixels += this_zone->strides[i];
    
    this_zone->count.min = (uint32_t)(log((double)(this_zone->count.pixels>>4)) * ZONE_MIN_MULTI);
    if (!this_zone->count.min)
        this_zone->count.min = 1;
    this_zone->name = (char*)malloc(strlen(name)+1);
    strcpy(this_zone->name, name);

    fprintf(stderr, "zone %s:\n\tdelta: %.4f\n\tpixels:\t%u (min: %u)\n\tstrides:\t%u\n", this_zone->name, this_zone->trigger, this_zone->count.pixels, this_zone->count.min, this_zone->count.strides);

    this_zone->active = 0;
    this_zone->delta = 0;
    this_zone->count.active = 0;

    _debug_flow("--> Leaving read_zone", 0);

    return this_zone;
}

/*************************************************************************/

int write_zone (zonedef_t *this_zone) {

    _debug_flow("Entered write_zone", 0);

    char *path = (char*)malloc(strlen(_ZONES_PATH_) + strlen(this_zone->name) + 1);
    strcpy(path, _ZONES_PATH_);
    strcat(path, this_zone->name);
    int fd = open(path, O_WRONLY | O_CREAT | O_TRUNC,  S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);
    if (fd == -1) {
        _show_warning("Save", "Unable to write zone '%s': '%s'", this_zone->name, strerror(errno));
        free(path);
        return -1;
    }
    char *values = (char *)&((*this_zone).rate);
    int to_write = sizeof(unsigned long) * (this_zone->count.strides + 1);

    while (to_write) {
        int t = write(fd, values, to_write);
        if (t == -1) {
            _show_warning("Save", "Unable to write zone '%s': '%s'", this_zone->name, strerror(errno));
            free(path);
            close(fd);
            return -1;
        }
        to_write -= t;
        values+=t;
    }
    close(fd);
    free(path);

    _debug_flow("--> Leaving write_zone", 0);

    return 0;
}

/*************************************************************************/

double read_full_zone_delta () {
    struct stat stbuf;
    _debug_flow("Attempting to read full zone delta from '%s'", _FULL_ZONE_DELTA_FILE_);
    if (stat(_FULL_ZONE_DELTA_FILE_, &stbuf)) return -1;
    if (S_ISDIR(stbuf.st_mode)) return -1;

    FILE *tmp = fopen(_FULL_ZONE_DELTA_FILE_, "r");
    if (tmp == NULL) return -1;

    char buf[100];

    if (fgets(buf, 100, tmp) != NULL) {
        double zd = atof(buf);
        if (zd) {
            _show_warning("Delta", "Read zone delta: (old: %.4f) (new: %.4f)", full_zone.trigger, zd);
            return zd;
        }
    }

    fclose(tmp);
    return -1;
    
}

/*************************************************************************/

void mark_cells_in_zone (zonedef_t *zone) {
//    cell_t *C = cells;

    uint32_t zflag = 1<<(zone->id);
    
    int i = 0;
    int pos = 0;
    int err = 0;
    while (i < zone->count.strides) {
        pos += zone->strides[i];
//        C += zone->strides[i];
        i++;
        int j = zone->strides[i];
        i++;
        while (j--) {
            if (pos < pixels)
                cells[pos].zones |= zflag;
            else if (!err) {
                _show_error("Zones", "Zone %s strides exceed the cell array!", zone->name);
                err =1;
            }
            pos++;
        }
    }

    fflush(stdout);

    return;
}

/*************************************************************************/

static inline void init_full_zone (uint32_t pixels) {
    // read zone delta if file exists
    double delta = read_full_zone_delta();
    if (delta != -1) full_zone.trigger = delta;

    // zero the delta values
    full_zone.delta = full_zone.last_delta = 0;

    // set the pixel count
    full_zone.count.pixels = pixels;
    full_zone.count.min = (uint32_t)(log((double)(pixels>>4)) * ZONE_MIN_MULTI);
    printf("Full zone minimum active: %u\n", full_zone.count.min);
    if (!full_zone.count.min)
        full_zone.count.min = 1;

    // initialize the zone signaler
    init_zone_signaler(&full_zone);

    return;
}

/*************************************************************************/

int read_all_zones (uint32_t w, uint32_t h) {

    _debug_flow("Entered read_all_zones", 0);
    chdir(_ZONES_PATH_);

    init_full_zone(w * h);

    nzones = 1;

    return read_zones_in(_ZONES_PATH_);
}

int read_zones_in (const char *path) {

    DIR *zone_dir = opendir(path);

    fchdir(dirfd(zone_dir));

    struct dirent *entry;

    if (zone_dir == NULL) {
        _show_warning("Load", "Unable to load zones, could not open zone directory: '%s'", strerror(errno));
        return -1;
    }

    while ((entry = readdir(zone_dir)) != NULL) {
        if (entry->d_name[0] == '.') continue;

        if (nzones >= MAX_ZONES) {
            _show_warning("Load", "Reached max zones of %u", MAX_ZONES);
            return nzones;
        }

        if (entry->d_type == DT_DIR) {
            read_zones_in(entry->d_name);
            fchdir(dirfd(zone_dir));
            continue;
        }

        zonedef_t *zone = read_zone(entry->d_name);
        if (zone == NULL) {
            _show_warning("Load", "Failed loading zone '%s'", entry->d_name);
            continue;
        }

        zone->id = nzones++;
//        printf("Setting zone '%s' to id %d\n", zone->name, zone->id); fflush(stdout);
        all_zones[zone->id] = zone;
        init_zone_signaler(zone);
        mark_cells_in_zone(zone);
    }
    closedir(zone_dir);

    _debug_flow("--> Leaving read_all_zones", 0);

    return nzones;
}

/*************************************************************************/

void zero_zone_deltas () {
    int z;
    for (z = 0; z < nzones; z++) {
/*        
        all_zones[z]->delta = fabs(all_zones[z]->delta);
        all_zones[z]->last_delta += all_zones[z]->delta;
        all_zones[z]->last_delta /= 3;
        if (!isnormal(all_zones[z]->last_delta) || all_zones[z]->last_delta < .5)
            all_zones[z]->last_delta = 0;
*/
//        all_zones[z]->last_delta += all_zones[z]->delta;
//        all_zones[z]->last_delta *= 0.5;
        all_zones[z]->delta = 0;
        all_zones[z]->count.active = 0;
        all_zones[z]->vert = 0;
        all_zones[z]->tilt = 0;
/*        
        if (all_zones[z]->count.active < all_zones[z]->count.pixels>>4) {
            all_zones[z]->count.active = 0;
        } else {
            all_zones[z]->count.active -= all_zones[z]->count.pixels>>4;
        }
*/        
    }
    return;
}

int calculate_zone_deltas (uint32_t supressor) {
//    return 0;
    int z;
    int ret = 0;
    for (z = 0; z < nzones; z++) {
//        printf("zone '%s': active(%u), delta: %0.3f == ", all_zones[z]->name, all_zones[z]->count.active, all_zones[z]->delta);
        if (all_zones[z]->count.active > all_zones[z]->count.min && isgreater(all_zones[z]->delta, 0)) {
//            printf("calculating zone %u: %s (active: %u, total: %u, pre-delta: %0.3f, ", z, all_zones[z]->name, all_zones[z]->count.active, all_zones[z]->count.pixels, all_zones[z]->delta);
/*            
            double mul = (all_zones[z]->count.active + 1);
            mul *= mul;
            mul /= all_zones[z]->count.pixels;
            supressor *= mul;
*/
            all_zones[z]->delta /= all_zones[z]->count.pixels;
//            int pix = ;
//            pix += pix>>2;
            all_zones[z]->delta *= (log(all_zones[z]->count.active + 2.8));
            all_zones[z]->delta /= ((supressor>>4) + 1);
//            all_zones[z]->delta /= (all_zones[z]->count.active + 1);
//            all_zones[z]->delta /= log(((double)all_zones[z]->count.pixels)/4); //log10((double)all_zones[z]->count.pixels);
//            all_zones[z]->delta /= supressor;
//            all_zones[z]->delta /= all_zones[z]->count.active;

            if (!isgreater(all_zones[z]->delta, 0))
                all_zones[z]->delta = 0;

//            printf("post-delta: %0.3f\n", all_zones[z]->delta);
//            all_zones[z]->delta += all_zones[z]->last_delta;

        } else {
            all_zones[z]->delta = 0.0;
        }

//        printf("%0.3f\n", all_zones[z]->delta);
        ret += check_zone_trigger(all_zones[z]);
    }

//    fflush(stdout);
    return ret;
}
 
int check_zone_trigger (zonedef_t *zone) {
    /* if our delta has dropped below the trigger
     * signal inactive if active, the return
     */
    int ret = 0;
    if (zone->delta <= zone->trigger) { 
        if (zone->active) {
            _debug_verbose("signaling zone %s inactive...", zone->name);
            signal_zone_inactive(zone);
            zone->active = 0;
            ret = 1;
        }
        signal_zone_delta(zone);
        return ret;
    }
    
    ret = 1;
    zone->active++;
    signal_zone_active(zone);

    // send deltas if sending deltas is enabled
    signal_zone_delta(zone);

    return 1;
}

/*************************************************************************/

int add_delta_to_bitzones (uint64_t bits, double delta, double vert, double tilt) {
    int z;
    int c = 0;
//    printf("adding delta %0.3f to zones 0x%llX\n", delta, bits);
    for (z = 0; z < nzones && bits; z++, bits >>= 1) {
        if (bits & 1) {
            all_zones[z]->delta += delta;
            all_zones[z]->count.active++;
            all_zones[z]->vert += vert;
            all_zones[z]->tilt += tilt;
            c++;
        }
    }
    return c;
}


